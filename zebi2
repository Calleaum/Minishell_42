To handle heredocs like in bash for the examples you provided, you need to modify your code to process multiple heredocs in the correct order, both within a single command and across pipelines. Let me analyze what needs to be changed in your implementation.
Currently, your code seems to handle heredocs one at a time as it encounters them in the token list. For multiple heredocs in a single command or across pipes, you need to ensure that:

1. Each heredoc is processed in the order they appear in the command line
2. All heredocs are set up before executing any commands
3. The correct stdin is used for each command in the pipeline

Here's what I'd recommend changing:

1. First, modify your apply_redirections function to collect all heredocs before applying them
2. Then create a function to process all heredocs in order
3. Finally, ensure the pipe handling properly connects inputs and outputs

Let's create a solution:
Multiple Heredoc ImplementationCodeÂ 
The key changes I've made to handle multiple heredocs in your code:

1. Created a linked list structure (t_heredoc) to store information about each heredoc.
2. Added a function to collect all heredocs from the token list before processing any of them.
3. Modified the processing approach to handle all heredocs in order, saving their pipe file descriptors.
4. Updated the redirection handling to use the appropriate heredoc pipe when needed.
5. Added state tracking to reset heredoc processing between command lines.

This implementation will handle your examples correctly:

<< EOF << a << k - Will collect all three heredocs in order, prompt for their content in order, and use the last one as stdin for the command.
<< a | << k - Will collect both heredocs, prompt for their content in order, and use each one as stdin for the respective command in the pipeline.

The solution maintains a static variable to track the state between function calls, which is necessary because your code processes each command in the pipeline separately.
Would you like me to explain any specific part of this implementation in more detail?